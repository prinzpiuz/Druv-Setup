version: "3.7"
services:
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    pull_policy: always
    privileged: true
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - /configs/gluetun:/gluetun
    environment:
      - TZ=Asia/Kolkata
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - WIREGUARD_ADDRESSES=${WIREGUARD_ADDRESSES}
      - SERVER_CITIES=${SERVER_CITIES}
      - UPDATER_PERIOD=24h
    restart: always
    ports:
      - 54509:54509
      - 54509:54509/udp
      - 51820:51820
      - 51820:51820/udp
      - 8080:8080 # qbittorrent
      - 9696:9696 # Prowlarr
      - 9117:9117 # Jackett
      - 5216:5216 # myspeed
      - 8000:8000 # gluetun
      - 5055:5055 # jellyseer
    networks:
      arr:
        ipv4_address: ${GLUETUN_IPV4_ADDR}
  qbittorrent:
    image: ghcr.io/hotio/qbittorrent
    container_name: qbittorrent
    pull_policy: always
    restart: always
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Asia/Kolkata
      - WEBUI_PORTS=8080/tcp,8080/udp
      - PRIVOXY_ENABLED=false
      - UNBOUND_ENABLED=false
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    volumes:
      - /configs/qbit:/config
      - /data:/data
    network_mode: service:gluetun
    depends_on:
      gluetun:
        condition: service_healthy
  qbit_manage:
    image: ghcr.io/stuffanthings/qbit_manage:latest
    container_name: qbit_manage
    pull_policy: always
    volumes:
      - /configs/qbit_manage:/config:rw
      - /data:/data:rw
      - /data/torrents:/data/torrents:rw
    environment:
      - QBT_RUN=false
      - QBT_SCHEDULE=1440
      - QBT_CONFIG=config.yml
      - QBT_LOGFILE=activity.log
      - QBT_CROSS_SEED=true
      - QBT_RECHECK=true
      - QBT_CAT_UPDATE=true
      - QBT_TAG_UPDATE=true
      - QBT_REM_UNREGISTERED=false
      - QBT_REM_ORPHANED=false
      - QBT_TAG_TRACKER_ERROR=true
      - QBT_TAG_NOHARDLINKS=true
      - QBT_SHARE_LIMITS=false
      - QBT_SKIP_CLEANUP=false
      - QBT_DRY_RUN=false
      - QBT_LOG_LEVEL=INFO
      - QBT_DIVIDER==
      - QBT_WIDTH=100
    restart: unless-stopped
    depends_on:
      - qbittorrent
    networks:
      - arr
  qbitrr:
    image: feramance/qbitrr:latest
    container_name: qbitrr
    pull_policy: always
    user: 1000:1000 # Required to ensure the container is run as the user who has perms to see the 2 mount points and the ability to write to the CompletedDownloadFolder mount
    tty: true # Ensure the output of docker-compose logs qBitrr are properly colored.
    restart: unless-stopped
    environment:
      - TZ=Asia/Kolkata
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /configs/qbitrr:/config # Config folder for qBitrr
      - /data/torrents:/completed_downloads:rw
      # The script will ALWAYS require write permission in this folder if mounted, this folder is used to monitor completed downloads and if not present will cause the script to ignore downloaded file monitoring.
      # Now just to make sure it is clean, when using this script in a docker you will need to ensure you config.toml values reflect the mounted folders.
      # The same would apply to Settings.CompletedDownloadFolder
      # e.g CompletedDownloadFolder = /completed_downloads/folder/in/container
    depends_on:
      - qbittorrent
      - sonarr
      - radarr
    networks:
      - arr
  radarr:
    image: ghcr.io/hotio/radarr:latest
    container_name: radarr
    pull_policy: always
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 7878:7878
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /configs/radarr:/config
      - /data:/data
    depends_on:
      - gluetun
    networks:
      arr:
        ipv4_address: ${RADARR_IPV4_ADDR}
  sonarr:
    image: ghcr.io/hotio/sonarr:latest
    container_name: sonarr
    pull_policy: always
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 8989:8989
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /configs/sonarr:/config
      - /data:/data
    depends_on:
      - gluetun
    networks:
      arr:
        ipv4_address: ${SONARR_IPV4_ADDR}
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    pull_policy: always
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - TZ=Asia/Kolkata
    ports:
      - 8191:8191
    restart: unless-stopped
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
    networks:
      arr:
        ipv4_address: ${FLARESOLVERR_IPV4_ADDR}
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    pull_policy: always
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /configs/prowlarr:/config
    restart: unless-stopped
    network_mode: service:gluetun
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
    depends_on:
      gluetun:
        condition: service_healthy
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
      - AUTO_UPDATE=true
    network_mode: service:gluetun
    volumes:
      - /configs/jackett:/config
      - /data:/downloads
    restart: unless-stopped
    depends_on:
      gluetun:
        condition: service_healthy
  recyclarr:
    image: ghcr.io/recyclarr/recyclarr:latest
    container_name: recyclarr
    pull_policy: always
    user: 1000:1000
    volumes:
      - /configs/recyclarr:/config
    restart: unless-stopped
    environment:
      CRON_SCHEDULE: "* * * * *"
      TZ: Asia/Kolkata
    networks:
      - arr
  bazarr:
    image: ghcr.io/hotio/bazarr:latest
    container_name: bazarr
    pull_policy: always
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 6767:6767
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /configs/bazarr:/config
      - /data/media:/data/media
    depends_on:
      gluetun:
        condition: service_healthy
    networks:
      arr:
        ipv4_address: ${BAZARR_IPV4_ADDR}
  emby:
    image: emby/embyserver
    container_name: emby
    pull_policy: always
    environment:
      - UID=1000
      - GID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /configs/emby:/config
      - /data/media:/media
    ports:
      - 8096:8096
    restart: unless-stopped
    networks:
      arr:
        ipv4_address: ${JELLYFIN_IPV4_ADDR}
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    pull_policy: always
    user: 1000:1000
    environment:
      - LOG_LEVEL=debug
      - TZ=Asia/Kolkata
      - JELLYFIN_TYPE=emby
    volumes:
      - /configs/jellyseerr:/app/config
    restart: always
    network_mode: service:gluetun
    depends_on:
      gluetun:
        condition: service_healthy
  unpackerr:
    image: golift/unpackerr
    container_name: unpackerr
    pull_policy: always
    volumes:
      - /data:/downloads
    restart: always
    user: 1000:1000
    environment:
      - TZ=Asia/Kolkata
      - UN_LOG_FILE=/downloads/unpackerr.log
      - UN_SONARR_0_URL=http://${SONARR_IPV4_ADDR}:8989
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_RADARR_0_URL=http://${RADARR_IPV4_ADDR}:7878
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
    security_opt:
      - no-new-privileges:true
    networks:
      - arr
  scrutiny_influxdb:
    image: influxdb:2.2
    container_name: scrutiny_influxdb
    pull_policy: always
    ports:
      - 8086:8086
    volumes:
      - /influxdb:/var/lib/influxdb2
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/health" ]
      interval: 5s
      timeout: 10s
      retries: 20
  scrutiny_web:
    image: ghcr.io/analogj/scrutiny:master-web
    container_name: scrutiny_web
    pull_policy: always
    ports:
      - 8081:8081
    volumes:
      - /configs/scrutiny:/opt/scrutiny/config
    restart: unless-stopped
    environment:
      SCRUTINY_WEB_INFLUXDB_HOST: scrutiny_influxdb
    depends_on:
      scrutiny_influxdb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/health" ]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 10s
  scrutiny_collector:
    image: ghcr.io/analogj/scrutiny:master-collector
    container_name: scrutiny_collector
    pull_policy: always
    cap_add:
      - SYS_RAWIO
    volumes:
      - /run/udev:/run/udev:ro
    restart: unless-stopped
    environment:
      COLLECTOR_API_ENDPOINT: http://scrutiny_web:8081
    depends_on:
      scrutiny_web:
        condition: service_healthy
    devices:
      - /dev/sda
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    pull_policy: always
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
      - 127.0.0.1:2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    restart: unless-stopped
    networks:
      - arr
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    pull_policy: always
    environment:
      PUID: 1000
      PGID: 1000
    ports:
      - 3000:3000
    volumes:
      - /configs/homepage:/app/config
    restart: unless-stopped
    networks:
      - arr
  myspeed:
    image: germannewsmaker/myspeed
    container_name: mySpeed
    pull_policy: always
    volumes:
      - /configs/myspeed:/myspeed/data
    restart: unless-stopped
    network_mode: service:gluetun
    depends_on:
      gluetun:
        condition: service_healthy

networks:
  arr:
    external: true
