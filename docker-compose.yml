version: "3.7"
services:
  qbittorrent:
    container_name: qbittorrent
    image: ghcr.io/hotio/qbittorrent
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=Asia/Kolkata
      - WEBUI_PORTS=8080/tcp,8080/udp
      - PRIVOXY_ENABLED=false
      - UNBOUND_ENABLED=false
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    volumes:
      - /configs/qbit:/config
      - /data:/data
    networks:
      - arr
  qbit_manage:
    container_name: qbit_manage
    image: ghcr.io/stuffanthings/qbit_manage:latest
    volumes:
      - /configs/qbit_manage:/config:rw
      - /data:/data:rw
      - /data/torrents:/data/torrents:rw
    environment:
      - QBT_RUN=false
      - QBT_SCHEDULE=1440
      - QBT_CONFIG=config.yml
      - QBT_LOGFILE=activity.log
      - QBT_CROSS_SEED=true
      - QBT_RECHECK=true
      - QBT_CAT_UPDATE=true
      - QBT_TAG_UPDATE=true
      - QBT_REM_UNREGISTERED=false
      - QBT_REM_ORPHANED=false
      - QBT_TAG_TRACKER_ERROR=true
      - QBT_TAG_NOHARDLINKS=true
      - QBT_SHARE_LIMITS=false
      - QBT_SKIP_CLEANUP=false
      - QBT_DRY_RUN=false
      - QBT_LOG_LEVEL=INFO
      - QBT_DIVIDER==
      - QBT_WIDTH=100
    restart: on-failure:2
    depends_on:
      - qbittorrent
    networks:
      - arr
  qbitrr:
    image: feramance/qbitrr:latest
    user: 1000:1000 # Required to ensure the container is run as the user who has perms to see the 2 mount points and the ability to write to the CompletedDownloadFolder mount
    tty: true # Ensure the output of docker-compose logs qBitrr are properly colored.
    restart: unless-stopped
    container_name: qbitrr
    environment:
      - TZ=Asia/Kolkata
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /configs/qbitrr:/config # Config folder for qBitrr
      - /data/torrents:/completed_downloads:rw
      # The script will ALWAYS require write permission in this folder if mounted, this folder is used to monitor completed downloads and if not present will cause the script to ignore downloaded file monitoring.
      # Now just to make sure it is clean, when using this script in a docker you will need to ensure you config.toml values reflect the mounted folders.
      # The same would apply to Settings.CompletedDownloadFolder
      # e.g CompletedDownloadFolder = /completed_downloads/folder/in/container
    depends_on:
      - qbittorrent
      - sonarr
      - radarr
    networks:
      - arr
  radarr:
    container_name: radarr
    image: ghcr.io/hotio/radarr:latest
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 7878:7878
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /configs/radarr:/config
      - /data:/data
    networks:
      - arr
  sonarr:
    container_name: sonarr
    image: ghcr.io/hotio/sonarr:latest
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 8989:8989
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /configs/sonarr:/config
      - /data:/data
    networks:
      - arr
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=info
      - LOG_HTML=false
      - CAPTCHA_SOLVER=none
      - TZ=Asia/Kolkata
    ports:
      - 8191:8191
    restart: unless-stopped
    networks:
      - arr
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /configs/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped
    networks:
      - arr
  recyclarr:
    image: ghcr.io/recyclarr/recyclarr:latest
    user: 1000:1000
    container_name: recyclarr
    volumes:
      - /configs/recyclarr:/config
    restart: unless-stopped
    environment:
      CRON_SCHEDULE: "* * * * *"
      TZ: Asia/Kolkata
    networks:
      - arr
  bazarr:
    container_name: bazarr
    image: ghcr.io/hotio/bazarr:latest
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 6767:6767
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Kolkata
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /configs/bazarr:/config
      - /data/media:/data/media
    networks:
      - arr
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    user: 1000:1000
    network_mode: host
    volumes:
      - /configs/jellyfin:/config
      - /jellyfin_cache:/cache
      - type: bind
        source: /data/media
        target: /media
    restart: unless-stopped
    extra_hosts:
      - 'host.docker.internal:host-gateway'
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    user: 1000:1000
    environment:
      - LOG_LEVEL=debug
      - TZ=Asia/Kolkata
    ports:
      - 5055:5055
    volumes:
      - /configs/jellyseerr:/app/config
    restart: unless-stopped
    networks:
      - arr
  unpackerr:
    image: golift/unpackerr
    container_name: unpackerr
    volumes:
      - /data:/downloads
    restart: always
    user: 1000:1000
    environment:
      - TZ=Asia/Kolkata
      - UN_LOG_FILE=/downloads/unpackerr.log
      - UN_SONARR_0_URL=http://192.168.2.154:8989
      - UN_SONARR_0_API_KEY=517ad724ae8a45b18e3c637538b70c02
      - UN_RADARR_0_URL=http://192.168.2.154:7878
      - UN_RADARR_0_API_KEY=d171c00a200f49a282a3f9b2e4c8a8ba
    security_opt:
      - no-new-privileges:true
    networks:
      - arr
  scrutiny_influxdb:
    container_name: scrutiny_influxdb
    image: influxdb:2.2
    ports:
      - '8086:8086'
    volumes:
      - /influxdb:/var/lib/influxdb2
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/health" ]
      interval: 5s
      timeout: 10s
      retries: 20
  scrutiny_web:
    container_name: scrutiny_web
    image: ghcr.io/analogj/scrutiny:master-web
    ports:
      - '8081:8081'
    volumes:
      - /configs/scrutiny:/opt/scrutiny/config
    restart: unless-stopped
    environment:
      SCRUTINY_WEB_INFLUXDB_HOST: 'scrutiny_influxdb'
    depends_on:
      scrutiny_influxdb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/api/health" ]
      interval: 5s
      timeout: 10s
      retries: 20
      start_period: 10s
  scrutiny_collector:
    container_name: scrutiny_collector
    image: ghcr.io/analogj/scrutiny:master-collector
    cap_add:
      - SYS_RAWIO
    volumes:
      - /run/udev:/run/udev:ro
    restart: unless-stopped
    environment:
      COLLECTOR_API_ENDPOINT: 'http://scrutiny_web:8081'
    depends_on:
      scrutiny_web:
        condition: service_healthy
    devices:
      - /dev/sda
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
      - 127.0.0.1:2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Mounted as read-only
    restart: unless-stopped
    networks:
      - arr
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      PUID: 1000
      PGID: 1000
    ports:
      - 3000:3000
    volumes:
      - /configs/homepage:/app/config
    restart: unless-stopped
    networks:
      - arr
  myspeed:
    image: germannewsmaker/myspeed
    container_name: MySpeed
    ports:
      - 5216:5216
    volumes:
      - /configs/myspeed:/myspeed/data
    restart: unless-stopped
    networks:
      - arr

networks:
  arr:
    external: true
